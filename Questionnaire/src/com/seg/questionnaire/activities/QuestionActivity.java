package com.seg.questionnaire.activities;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.seg.questionnaire.R;
import com.seg.questionnaire.backend.Questionnaire;
import com.seg.questionnaire.backend.factories.AnswersFactory;
import com.seg.questionnaire.backend.factories.QuestionnaireFactory;
import com.seg.questionnaire.backend.json.JSONParser;
import com.seg.questionnaire.backend.question.Question;

/**
 * Class responsible for displaying all questions from a 
 * questionnaire and handling the whole questionnaire.
 * 
 * @author Marek Matejka
 *
 */
public class QuestionActivity extends Activity 
{	
	/**
	 * Should be used with changeQuestion method, because it properly defines
	 * values to change questions appropriately.
	 */
	private static final int NEXT_QUESTION = 1, PREVIOUS_QUESTION = -1;
		
	/**
	 * Defines the current question
	 */
	private int currentQuestion = 0;
		
	/**
	 * Current questionnaire being used.
	 */
	private Questionnaire ques;
		
	/* (non-Javadoc)
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_question);
		
		//initialize questionnaire
		ques = QuestionnaireFactory.creatQuestionnaire(JSONParser.parse(this));
		//ques.loadDummy();
				
		//load first question
		loadQuestion(ques.getQuestion(currentQuestion));
		
		JSONParser.parse(this);	
	}
	
	/**
	 * Responds to click event on 'Next' button.
	 * 
	 * @param v View on which the event happened.
	 */
	public void changeQuestion(View v)
	{
		if (v.getId() == R.id.next || v.getId() == R.id.skip)
			changeQuestion(NEXT_QUESTION);
		else //R.id.previous
			changeQuestion(PREVIOUS_QUESTION);
	}
	
	/**
	 * Does all the necessary steps to change the question.
	 * 
	 * @param direction Should only use {@link #PREVIOUS_QUESTION} or
	 * {@link #NEXT_QUESTION}.
	 */
	private void changeQuestion(int direction)
	{		
		//take current question and answer
		Question q = ques.getQuestion(currentQuestion);
		String lastAnswer = q.getLastAnswer();
		String answer = q.getAnswer();
				
		if (answer == null) //if no answer
			Toast.makeText(this, getString(R.string.answer_first), Toast.LENGTH_SHORT).show(); //ask for it
		else
		{
			if (!answer.equals(lastAnswer)) //if the last answer and the new answer does not equal
			{
				if(q.hasDependentQuestions(lastAnswer)) //if there are any dependent questions for last answer
					ques.removeQuestions(q.getDependentQuestions(lastAnswer)); //remove them from the questionnaire
				
				if (q.hasDependentQuestions(answer)) //if there are some dependent questions for a given answer
					ques.addQuestions(q.getDependentQuestions(answer.toString()), currentQuestion); //add them to the questionnaire
			}
										
			Toast.makeText(this, "answer = '"+answer+"'", Toast.LENGTH_SHORT).show(); //show the answer
					
			currentQuestion = (currentQuestion+direction); //change the current position pointer value
					
			/*if (currentQuestion == 0) //if first question in new loop
			{
				Log.e("DEBUG", JSONParser.toJSON(AnswersFactory.createJSON(ques))); //create and print AnswersJSON
				ques.deleteQuestionnaire();
				ques = QuestionnaireFactory.creatQuestionnaire(JSONParser.parse(this)); //create new questionnaire
				//ques.loadDummy();
			}*/
			
			if (currentQuestion == ques.getNumberOfQuestions())
			{
				Log.e("DEBUG", AnswersFactory.createJSON(ques));
				startActivity(new Intent(this, ThankYouActivity.class));
				finish();
			}
			else
				loadQuestion(ques.getQuestion(currentQuestion)); //load next question
		}
		
	}
	
	/**
	 * Loads a given question and displays it to the user.
	 * 
	 * @param q Question to be loaded and displayed.
	 */
	private void loadQuestion(Question q)
	{	
		updateProgress();
		
		//find the RelativeLayout
		RelativeLayout answer = (RelativeLayout)findViewById(R.id.answer);
		
		//make it empty
		answer.removeAllViews(); 
		
		//add the View generated by the Question
		answer.addView(q.getView(this));
		
		//find the question TextView and set it with question text for the question
		TextView question = (TextView)findViewById(R.id.question);
		question.setText(q.getQuestion());
		
		q.loadAnswer(); //load answer for the question
		
		//set buttons visible or gone based on some basic conditions
		Button skip = (Button)findViewById(R.id.skip);
		if (q.isRequired())
			skip.setVisibility(View.GONE);
		else
			skip.setVisibility(View.VISIBLE);
		
		Button previous = (Button)findViewById(R.id.previous);
		if (currentQuestion == 0)
			previous.setVisibility(View.GONE);
		else
			previous.setVisibility(View.VISIBLE);
		
		Button next = (Button)findViewById(R.id.next);
		if (currentQuestion == ques.getNumberOfQuestions()-1)
			next.setText("Submit");
		else
			next.setText("Next");
	}
	
	/**
	 * Updates progress visually to the user.
	 */
	private void updateProgress()
	{
		//find a TextView and set it with current values
		TextView outOf = (TextView) findViewById(R.id.outOf);
		outOf.setText(""+(currentQuestion+1)+"/"+ques.getNumberOfQuestions());
		
		//find a ProgressBar and set it to current value
		ProgressBar p = (ProgressBar) findViewById(R.id.progressBar1);
		p.setMax(ques.getNumberOfQuestions());
		p.setProgress(currentQuestion+1);
	}
	
	/* (non-Javadoc)
	 * @see android.app.Activity#onBackPressed()
	 */
	@Override
	public void onBackPressed()
	{
		if (currentQuestion > 0)
			changeQuestion(PREVIOUS_QUESTION); //change to previous question
	}
	
	/* (non-Javadoc)
	 * @see android.app.Activity#onStop()
	 */
	@Override
	public void onStop()
	{
		super.onStop();
		if (currentQuestion != ques.getNumberOfQuestions())
			startActivity(new Intent(this, LoginActivity.class));}
}
